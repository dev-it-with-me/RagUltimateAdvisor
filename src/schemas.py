from pydantic import BaseModel, Field


class DocumentMetadata(BaseModel):
    """Metadata for source documents."""

    file_name: str = Field(..., description="Name of the source file.")
    page: int | None = Field(
        None, description="Page number in the document (if applicable)."
    )
    source: str | None = Field(None, description="Source or origin of the document.")


class SourceDocument(BaseModel):
    """Represents a source document used for context in the RAG response."""

    content: str = Field(..., description="The content of the source document.")
    score: float = Field(
        ..., description="Similarity score of the document to the query."
    )
    metadata: DocumentMetadata = Field(
        ..., description="Structured metadata about the document."
    )


class QueryResponse(BaseModel):
    chat_response: str = Field(..., description="Response generated by the chat model.")
    source_documents: list[SourceDocument] = Field(
        default_factory=list,
        description="List of source documents that were used as context for the response.",
    )


class QueryRequest(BaseModel):
    query: str = Field(..., description="The query string to be processed.")
    top_k: int = Field(5, description="Number of top results to return.", ge=1)


class HealthStatusResponse(BaseModel):
    """Health status response for RAG system components."""

    vector_store: bool = Field(..., description="Vector store availability status")
    embedding_model: bool = Field(
        ..., description="Embedding model availability status"
    )
    chat_model: bool = Field(..., description="Chat model availability status")
    index_status: bool | None = Field(
        None, description="Vector store index status (optional)"
    )


class DocumentCountResponse(BaseModel):
    """Response for document count endpoint."""

    document_count: int = Field(
        ..., description="Total number of documents in vector store"
    )
    message: str = Field(..., description="Human-readable message about document count")


class APIInfoResponse(BaseModel):
    """Response for root endpoint providing API information."""

    message: str = Field(..., description="Welcome message")
    description: str = Field(..., description="API description")
    version: str = Field(..., description="API version")
    endpoints: dict[str, str] = Field(..., description="Available API endpoints")


class HealthCheckResponse(BaseModel):
    """Response for health check endpoint."""

    status: str = Field(..., description="Health status")
    service: str = Field(..., description="Service name")
    version: str = Field(..., description="Service version")
